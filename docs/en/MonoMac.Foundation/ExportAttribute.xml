<Type Name="ExportAttribute" FullName="MonoMac.Foundation.ExportAttribute">
  <TypeSignature Language="C#" Value="public sealed class ExportAttribute : Attribute" />
  <AssemblyInfo>
    <AssemblyName>monomac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.All)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exports a method or property to the Objective-C world.</summary>
    <remarks>
      <para>
This attribute is applied to properties and methods in classes that derive from <see cref="T:MonoMac.Foundation.NSObject" /> to export the value to the Objective-C world.    This can be used either to respond to messages or to override an Objective-C method.
</para>
      <example>
        <code lang="C#">
public class Test : SomeBaseClass {
    [Export ("setText:withFont:")]
    public void SetText (string text, string font)
    {
    }
}
  </code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.</summary>
        <remarks>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.   The name is derived from the actual method or property.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (string selector);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selector" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="selector">The selector name.</param>
        <summary>Exports the given method or property to Objective-C land with the specified method name.</summary>
        <remarks>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (string selector, MonoMac.ObjCRuntime.ArgumentSemantic semantic);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selector" Type="System.String" />
        <Parameter Name="semantic" Type="MonoMac.ObjCRuntime.ArgumentSemantic" />
      </Parameters>
      <Docs>
        <param name="selector">The selector name.</param>
        <param name="semantic">The semantics of the setter (Assign, Copy or Retain).</param>
        <summary>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.</summary>
        <remarks>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentSemantic">
      <MemberSignature Language="C#" Value="public MonoMac.ObjCRuntime.ArgumentSemantic ArgumentSemantic { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.ObjCRuntime.ArgumentSemantic</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The semantics for object ownership on setter properties or methods.</summary>
        <value>The assignment ownership semantics for setting the value.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Selector">
      <MemberSignature Language="C#" Value="public string Selector { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the C# selector if specified, or null if it is derived from the property name or method.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
