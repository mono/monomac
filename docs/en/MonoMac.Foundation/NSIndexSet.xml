<Type Name="NSIndexSet" FullName="MonoMac.Foundation.NSIndexSet">
  <TypeSignature Language="C#" Value="public class NSIndexSet : MonoMac.Foundation.NSObject, System.Collections.Generic.IEnumerable&lt;uint&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSIndexSet extends MonoMac.Foundation.NSObject implements class System.Collections.Generic.IEnumerable`1&lt;unsigned int32&gt;, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.UInt32&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSIndexSet", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>
      <format type="text/html">
        <h2 class="jump">Overview</h2>
      </format>
      <para>The <c>NSIndexSet</c> class represents an immutable collection of unique unsigned integers, known as <i>indexes</i> because of the way they are used. This collection is referred to as a <i>index set</i>.</para>
      <para>You use index sets in your code to store indexes into some other data structure. For example, given an <c>NSArray</c> object, you could use an index set to identify a subset of objects in that array.</para>
      <para>Each index value can appear only once in the index set. This is an important concept to understand and is why you would not use index sets to store an arbitrary collection of integer values. To illustrate how this works, if you created an <c>NSIndexSet</c> object with the values <c>4</c>, <c>5</c>, <c>2</c>, and <c>5</c>, the resulting set would only have the values <c>4</c>, <c>5</c>, and <c>2</c> in it. Because index values are always maintained in sorted order, the actual order of the values when you created the set would be <c>2</c>, <c>4</c>, and then <c>5</c>.</para>
      <para>In most cases, using an index set is more efficient than storing a collection of individual integers. Internally, the <c>NSIndexSet</c> class represents indexes using ranges. For maximum performance and efficiency, overlapping ranges in an index set are automatically coalescedâ€”that is, ranges merge rather than overlap. Thus, the more contiguous the indexes in the set, the fewer ranges are required to specify those indexes.</para>
      <para>The designated initializers of the NSIndexSet class are: <c><format type="text/html"><a href="Reference.html#//apple_ref/occ/instm/NSIndexSet/initWithIndexesInRange:">initWithIndexesInRange:</a></format></c> and <c><see cref="C:MonoMac.Foundation.NSIndexSet(MonoMac.Foundation.NSIndexSet)" /></c>.</para>
      <para>You must not subclass the <c>NSIndexSet</c> class.</para>
      <para>The mutable subclass of <c>NSIndexSet</c> is <format type="text/html"><a target="_top" href="../../NSMutableIndexSet_Class/Reference/Reference.html#//apple_ref/occ/cl/NSMutableIndexSet">NSMutableIndexSet</a></format>.</para>
      <format type="text/html">
        <h2 class="jump">Adopted Protocols</h2>
      </format>
      <format type="text/html">
        <a target="_top" href="../../../Protocols/NSCoding_Protocol/Reference/Reference.html#//apple_ref/occ/intf/NSCoding">NSCoding</a>
      </format>
      <list type="bullet">
        <item>
          <term>
            <para>
              <c>
                <format type="text/html">
                  <a target="_top" href="../../../Protocols/NSCoding_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSCoding/encodeWithCoder:">- encodeWithCoder:</a>
                </format>
              </c>
            </para>
          </term>
        </item>
        <item>
          <term>
            <para>
              <c>
                <format type="text/html">
                  <a target="_top" href="../../../Protocols/NSCoding_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSCoding/initWithCoder:">- initWithCoder:</a>
                </format>
              </c>
            </para>
          </term>
        </item>
      </list>
      <format type="text/html">
        <a target="_top" href="../../../Protocols/NSCopying_Protocol/Reference/Reference.html#//apple_ref/occ/intf/NSCopying">NSCopying</a>
      </format>
      <list type="bullet">
        <item>
          <term>
            <para>
              <c>
                <format type="text/html">
                  <a target="_top" href="../../../Protocols/NSCopying_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSCopying/copyWithZone:">- copyWithZone:</a>
                </format>
              </c>
            </para>
          </term>
        </item>
      </list>
      <format type="text/html">
        <a target="_top" href="../../../Protocols/NSMutableCopying_Protocol/Reference/Reference.html#//apple_ref/occ/intf/NSMutableCopying">NSMutableCopying</a>
      </format>
      <list type="bullet">
        <item>
          <term>
            <para>
              <c>
                <format type="text/html">
                  <a target="_top" href="../../../Protocols/NSMutableCopying_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSMutableCopying/mutableCopyWithZone:">- mutableCopyWithZone:</a>
                </format>
              </c>
            </para>
          </term>
        </item>
      </list>
      <format type="text/html">
        <h2 class="jump">Tasks</h2>
      </format>
      <format type="text/html">
        <h3 class="tasks">Creating Index Sets</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/clm/NSIndexSet/indexSet">+ indexSet</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Creates an empty index set." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSIndexSet.FromIndex(System.Int32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Creates an index set with an index." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSIndexSet.FromNSRange(MonoMac.Foundation.NSRange)" />
            </c>
            <format type="text/html">
              <img data-abstract="Creates an index set with an index range." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="C:MonoMac.Foundation.NSIndexSet" />
            </c>
            <format type="text/html">
              <img data-abstract="Initializes an allocated &lt;code&gt;NSIndexSet&lt;/code&gt; object." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="C:MonoMac.Foundation.NSIndexSet(System.UInt32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Initializes an allocated &lt;code&gt;NSIndexSet&lt;/code&gt; object with an index." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSIndexSet/initWithIndexesInRange:">- initWithIndexesInRange:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Initializes an allocated &lt;code&gt;NSIndexSet&lt;/code&gt; object with an index range." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="C:MonoMac.Foundation.NSIndexSet(MonoMac.Foundation.NSIndexSet)" />
            </c>
            <format type="text/html">
              <img data-abstract="Initializes an allocated &lt;code&gt;NSIndexSet&lt;/code&gt; object with an index set." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
      <format type="text/html">
        <h3 class="tasks">Querying Index Sets</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSIndexSet.Contains(System.UInt32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Indicates whether the receiver contains a specific index." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSIndexSet.Contains(MonoMac.Foundation.NSIndexSet)" />
            </c>
            <format type="text/html">
              <img data-abstract="Indicates whether the receiver contains a superset of the indexes in another index set." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSIndexSet/containsIndexesInRange:">- containsIndexesInRange:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Indicates whether the receiver contains the indexes represented by an index range." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSIndexSet/intersectsIndexesInRange:">- intersectsIndexesInRange:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Indicates whether the receiver contains any of the indexes in a range." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="P:MonoMac.Foundation.NSIndexSet.Count" />
            </c>
            <format type="text/html">
              <img data-abstract="Returns the number of indexes in the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSIndexSet/countOfIndexesInRange:">- countOfIndexesInRange:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Returns the number of indexes in the receiver that are members of a given range." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
      <format type="text/html">
        <h3 class="tasks">Comparing Index Sets</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSIndexSet.IsEqual(MonoMac.Foundation.NSIndexSet)" />
            </c>
            <format type="text/html">
              <img data-abstract="Indicates whether the indexes in the receiver are the same indeces contained in another index set." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
      <format type="text/html">
        <h3 class="tasks">Getting Indexes</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <see cref="P:MonoMac.Foundation.NSIndexSet.FirstIndex" />
            </c>
            <format type="text/html">
              <img data-abstract="Returns either the first index in the receiver or the not-found indicator." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="P:MonoMac.Foundation.NSIndexSet.LastIndex" />
            </c>
            <format type="text/html">
              <img data-abstract="Returns either the last index in the receiver or the not-found indicator." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSIndexSet.IndexLessThan(System.UInt32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Returns either the closest index in the receiver that is less than a specific index or the not-found indicator." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSIndexSet.IndexLessThanOrEqual(System.UInt32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Returns either the closest index in the receiver that is less than or equal to a specific index or the not-found indicator." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSIndexSet.IndexGreaterThanOrEqual(System.UInt32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Returns either the closest index in the receiver that is greater than or equal to a specific index or the not-found indicator." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <see cref="M:MonoMac.Foundation.NSIndexSet.IndexGreaterThan(System.UInt32)" />
            </c>
            <format type="text/html">
              <img data-abstract="Returns either the closest index in the receiver that is greater than a specific index or the not-found indicator." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSIndexSet/getIndexes:maxCount:inIndexRange:">- getIndexes:maxCount:inIndexRange:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="The receiver fills an index buffer with the indexes contained both in the receiver and in an index range, returning the number of indexes copied." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSIndexSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <para>Initializes an allocated <c><format type="text/html"><a href="Reference.html#//apple_ref/doc/uid/20002197-SW1">NSIndexSet</a></format></c> object.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSIndexSet (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSIndexSet (MonoMac.Foundation.NSIndexSet other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSIndexSet other) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithIndexSet:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="other" Type="MonoMac.Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
          <para>Initializes an allocated <c><format type="text/html"><a href="Reference.html#//apple_ref/doc/uid/20002197-SW1">NSIndexSet</a></format></c> object with an index set.</para>
        </summary>
        <remarks>
          <para>This method is a designated initializer for <c><format type="text/html"><a href="Reference.html#//apple_ref/doc/uid/20002197-SW1">NSIndexSet</a></format></c>.</para>
          <format type="text/html">
            <h5 class="tight">Availability</h5>
          </format>
          <list type="bullet">
            <item>
              <term>Available in iPhone OS 2.0 and later.</term>
            </item>
          </list>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSIndexSet (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSIndexSet (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSIndexSet (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSIndexSet (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 index) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Initializes an allocated <c><format type="text/html"><a href="Reference.html#//apple_ref/doc/uid/20002197-SW1">NSIndexSet</a></format></c> object with an index.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (MonoMac.Foundation.NSIndexSet indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class MonoMac.Foundation.NSIndexSet indexes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("containsIndexes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexes" Type="MonoMac.Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="indexes">To be added.</param>
        <summary>
          <para>Indicates whether the receiver contains a superset of the indexes in another index set.</para>
        </summary>
        <returns>
          <para>
            <see langword="true" /> when the receiver contains a superset of the indexes in <i>indexSet</i>, <see langword="false" /> otherwise.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("containsIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Indicates whether the receiver contains a specific index.</para>
        </summary>
        <returns>
          <para>
            <see langword="true" /> when the receiver contains <i>index</i>, <see langword="false" /> otherwise.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("count")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Returns the number of indexes in the receiver.</para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstIndex">
      <MemberSignature Language="C#" Value="public virtual uint FirstIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 FirstIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("firstIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Returns either the first index in the receiver or the not-found indicator.</para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromArray">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSIndexSet FromArray (int[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSIndexSet FromArray(int32[] items) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSIndexSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromArray">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSIndexSet FromArray (uint[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSIndexSet FromArray(unsigned int32[] items) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSIndexSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromIndex">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSIndexSet FromIndex (int idx);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSIndexSet FromIndex(int32 idx) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("indexSetWithIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSIndexSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="idx">To be added.</param>
        <summary>
          <para>Creates an index set with an index.</para>
        </summary>
        <returns>
          <para>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/doc/uid/20002197-SW1">NSIndexSet</a>
              </format>
            </c> object containing <i>index</i>.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNSRange">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSIndexSet FromNSRange (MonoMac.Foundation.NSRange indexRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSIndexSet FromNSRange(valuetype MonoMac.Foundation.NSRange indexRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("indexSetWithIndexesInRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSIndexSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexRange" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="indexRange">To be added.</param>
        <summary>
          <para>Creates an index set with an index range.</para>
        </summary>
        <returns>
          <para>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/doc/uid/20002197-SW1">NSIndexSet</a>
              </format>
            </c> object containing <i>indexRange</i>.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;uint&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;unsigned int32&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexGreaterThan">
      <MemberSignature Language="C#" Value="public virtual uint IndexGreaterThan (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 IndexGreaterThan(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("indexGreaterThanIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Returns either the closest index in the receiver that is greater than a specific index or the not-found indicator.</para>
        </summary>
        <returns>
          <para>Closest index in the receiver greater than <i>index</i>; <c><format type="text/html"><a target="_top" href="../../../Miscellaneous/Foundation_Constants/Reference/reference.html#//apple_ref/doc/constant_group/NSNotFound">NSNotFound</a></format></c> when the receiver contains no qualifying index.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexGreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public virtual uint IndexGreaterThanOrEqual (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 IndexGreaterThanOrEqual(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("indexGreaterThanOrEqualToIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Returns either the closest index in the receiver that is greater than or equal to a specific index or the not-found indicator.</para>
        </summary>
        <returns>
          <para>Closest index in the receiver greater than or equal to <i>index</i>; <c><format type="text/html"><a target="_top" href="../../../Miscellaneous/Foundation_Constants/Reference/reference.html#//apple_ref/doc/constant_group/NSNotFound">NSNotFound</a></format></c> when the receiver contains no qualifying index.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexLessThan">
      <MemberSignature Language="C#" Value="public virtual uint IndexLessThan (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 IndexLessThan(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("indexLessThanIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Returns either the closest index in the receiver that is less than a specific index or the not-found indicator.</para>
        </summary>
        <returns>
          <para>Closest index in the receiver less than <i>index</i>; <c><format type="text/html"><a target="_top" href="../../../Miscellaneous/Foundation_Constants/Reference/reference.html#//apple_ref/doc/constant_group/NSNotFound">NSNotFound</a></format></c> when the receiver contains no qualifying index.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexLessThanOrEqual">
      <MemberSignature Language="C#" Value="public virtual uint IndexLessThanOrEqual (uint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 IndexLessThanOrEqual(unsigned int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("indexLessThanOrEqualToIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <para>Returns either the closest index in the receiver that is less than or equal to a specific index or the not-found indicator.</para>
        </summary>
        <returns>
          <para>Closest index in the receiver less than or equal to <i>index</i>; <c><format type="text/html"><a target="_top" href="../../../Miscellaneous/Foundation_Constants/Reference/reference.html#//apple_ref/doc/constant_group/NSNotFound">NSNotFound</a></format></c> when the receiver contains no qualifying index.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEqual">
      <MemberSignature Language="C#" Value="public virtual bool IsEqual (MonoMac.Foundation.NSIndexSet other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEqual(class MonoMac.Foundation.NSIndexSet other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("isEqualToIndexSet:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="MonoMac.Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
          <para>Indicates whether the indexes in the receiver are the same indeces contained in another index set.</para>
        </summary>
        <returns>
          <para>
            <see langword="true" /> when the indexes in the receiver are the same indexes <i>indexSet</i> contains, <see langword="false" /> otherwise.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndex">
      <MemberSignature Language="C#" Value="public virtual uint LastIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 LastIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("lastIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Returns either the last index in the receiver or the not-found indicator.</para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public uint[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32[] ToArray() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
