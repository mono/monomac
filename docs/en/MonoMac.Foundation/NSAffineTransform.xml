<Type Name="NSAffineTransform" FullName="MonoMac.Foundation.NSAffineTransform">
  <TypeSignature Language="C#" Value="public class NSAffineTransform : MonoMac.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSAffineTransform extends MonoMac.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSAffineTransform")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>NSAffineTransform provides methods for manipulating and applying affine transforms</summary>
    <remarks>A transform provides instructions for transforming points from one coordinate
    system to another.  An affine transformation preserves parallel lines.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAffineTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new identity transformation.</summary>
        <remarks>An identity transformation converts any point to the same point.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAffineTransform (MonoMac.Foundation.NSAffineTransform transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSAffineTransform transform) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithTransform:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="transform" Type="MonoMac.Foundation.NSAffineTransform" />
      </Parameters>
      <Docs>
        <param name="transform">The transformation to copy.</param>
        <summary>Creates a new transformation matching the input value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAffineTransform (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAffineTransform (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAffineTransform (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTransform">
      <MemberSignature Language="C#" Value="public virtual void AppendTransform (MonoMac.Foundation.NSAffineTransform transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendTransform(class MonoMac.Foundation.NSAffineTransform transform) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("appendTransform:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="MonoMac.Foundation.NSAffineTransform" />
      </Parameters>
      <Docs>
        <param name="transform">A transformation to concatenate with the caller</param>
        <summary>Caller's transformation is replaced with caller's transformation multiplied by the supplied transformation</summary>
        <remarks>This is equivalent to applying the caller's transformation, then applying the provided transformation.
        Compare with PrependTransform.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public virtual void Concat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Concat() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("concat")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appends the caller's transformation to the current graphics context.</summary>
        <remarks>The current graphics context typically has a transformation reflecting the needs of the screen,
        window and superviews.  This method adds additional transformation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public virtual void Invert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invert() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("invert")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Replaces the transformation in the caller with the inverse of its current transformation.</summary>
        <remarks>Applying an inverse transformations, will revert coordinates to thier previous values.
        This is handy when used with the concat method to undo changes to the current graphics context</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrependTransform">
      <MemberSignature Language="C#" Value="public virtual void PrependTransform (MonoMac.Foundation.NSAffineTransform transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrependTransform(class MonoMac.Foundation.NSAffineTransform transform) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("prependTransform:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="MonoMac.Foundation.NSAffineTransform" />
      </Parameters>
      <Docs>
        <param name="transform">A transformation to concatenate with this transformation</param>
        <summary>This transformation is replaced by the supplied transformation multiplied by the this transformation</summary>
        <remarks>This is equivalent to applying the provided transformation then applying the caller's transformation.
        Compare with AppendTransform.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateByDegrees">
      <MemberSignature Language="C#" Value="public virtual void RotateByDegrees (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RotateByDegrees(float32 angle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("rotateByDegrees:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">The rotation angle (in degrees).</param>
        <summary>Appends a rotation factor to this transformation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateByRadians">
      <MemberSignature Language="C#" Value="public virtual void RotateByRadians (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RotateByRadians(float32 angle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("rotateByRadians:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">The rotation angle (in radians).</param>
        <summary>Appends a rotation factor to this transformation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual void Scale (float scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Scale(float32 scale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("scaleBy:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="scale">The scale factor for the X and Y directions.</param>
        <summary>Appends the scale factor to both axis in this transformation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual void Scale (float scaleX, float scaleY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Scale(float32 scaleX, float32 scaleY) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("scaleXBy:yBy:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Single" />
        <Parameter Name="scaleY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="scaleX">The scale factor for the X direction.</param>
        <param name="scaleY">The scale factor for the Y direction.</param>
        <summary>Appends the scale factors to this transformation.</summary>
        <remarks>A value of 1.0 does not change the scale in that direction.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public virtual void Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("set")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the transformation used by the current graphics context to this transformation.</summary>
        <remarks>The concat method should generally be prefered to this method.
        The current graphics context contains transformations for the screen, window and superviews that are
        lost when this method is used.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformBezierPath">
      <MemberSignature Language="C#" Value="public virtual MonoMac.AppKit.NSBezierPath TransformBezierPath (MonoMac.AppKit.NSBezierPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoMac.AppKit.NSBezierPath TransformBezierPath(class MonoMac.AppKit.NSBezierPath path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("transformBezierPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.AppKit.NSBezierPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="MonoMac.AppKit.NSBezierPath" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoint">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF TransformPoint (System.Drawing.PointF aPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF TransformPoint(valuetype System.Drawing.PointF aPoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("transformPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aPoint" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="aPoint">A point in the un-transformed coordinate system.</param>
        <summary>Gets the transformed coordinates of a point.</summary>
        <returns>An equivalent point in the transformed coordinate system.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF TransformSize (System.Drawing.SizeF aSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.SizeF TransformSize(valuetype System.Drawing.SizeF aSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("transformSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aSize" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="aSize">A width and height from (0,0).</param>
        <summary>Applies this transformation to size and returns the result.</summary>
        <returns>A new size resulting from transforming the input size.</returns>
        <remarks>Size represents a vector from (0,0), and is immune to translation effects of the transformation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformStruct">
      <MemberSignature Language="C#" Value="public virtual MonoMac.CoreGraphics.CGAffineTransform TransformStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.CoreGraphics.CGAffineTransform TransformStruct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("transformStruct")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setTransformStruct:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual void Translate (float deltaX, float deltaY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Translate(float32 deltaX, float32 deltaY) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("translateXBy:yBy:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deltaX" Type="System.Single" />
        <Parameter Name="deltaY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="deltaX">Distance to move in the X direction.</param>
        <param name="deltaY">Distance to move in the Y direction.</param>
        <summary>Applies the given translation distances to this transformation</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
