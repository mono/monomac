<Type Name="NSUrlProtocol" FullName="MonoMac.Foundation.NSUrlProtocol">
  <TypeSignature Language="C#" Value="public class NSUrlProtocol : MonoMac.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSUrlProtocol extends MonoMac.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSUrlProtocol")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlProtocol (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlProtocol (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlProtocol (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlProtocol (MonoMac.Foundation.NSUrlRequest request, MonoMac.Foundation.NSCachedUrlResponse cachedResponse, MonoMac.Foundation.NSUrlProtocolClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSUrlRequest request, class MonoMac.Foundation.NSCachedUrlResponse cachedResponse, class MonoMac.Foundation.NSUrlProtocolClient client) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithRequest:cachedResponse:client:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="request" Type="MonoMac.Foundation.NSUrlRequest" />
        <Parameter Name="cachedResponse" Type="MonoMac.Foundation.NSCachedUrlResponse" />
        <Parameter Name="client" Type="MonoMac.Foundation.NSUrlProtocolClient" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="cachedResponse">To be added.</param>
        <param name="client">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachedResponse">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSCachedUrlResponse CachedResponse { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSCachedUrlResponse CachedResponse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("cachedResponse")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSCachedUrlResponse</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachedResponseIsValid">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoMac.Foundation.NSUrlProtocolCachedResponseEventArgs&gt; CachedResponseIsValid;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoMac.Foundation.NSUrlProtocolCachedResponseEventArgs&gt; CachedResponseIsValid" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoMac.Foundation.NSUrlProtocolCachedResponseEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakClient property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelledAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoMac.Foundation.NSUrlProtocolChallengeEventArgs&gt; CancelledAuthenticationChallenge;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoMac.Foundation.NSUrlProtocolChallengeEventArgs&gt; CancelledAuthenticationChallenge" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoMac.Foundation.NSUrlProtocolChallengeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakClient property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanInitWithRequest">
      <MemberSignature Language="C#" Value="public virtual bool CanInitWithRequest (MonoMac.Foundation.NSUrlRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanInitWithRequest(class MonoMac.Foundation.NSUrlRequest request) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("canInitWithRequest:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="MonoMac.Foundation.NSUrlRequest" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSUrlProtocolClient Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSUrlProtocolClient Client" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSUrlProtocolClient</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoMac.Foundation.NSUrlProtocolDataEventArgs&gt; DataLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoMac.Foundation.NSUrlProtocolDataEventArgs&gt; DataLoaded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoMac.Foundation.NSUrlProtocolDataEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakClient property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FailedWithError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoMac.Foundation.NSUrlProtocolErrorEventArgs&gt; FailedWithError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoMac.Foundation.NSUrlProtocolErrorEventArgs&gt; FailedWithError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoMac.Foundation.NSUrlProtocolErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakClient property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishedLoading">
      <MemberSignature Language="C#" Value="public event EventHandler FinishedLoading;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FinishedLoading" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakClient property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCanonicalRequest">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSUrlRequest GetCanonicalRequest (MonoMac.Foundation.NSUrlRequest forRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSUrlRequest GetCanonicalRequest(class MonoMac.Foundation.NSUrlRequest forRequest) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("canonicalRequestForRequest:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSUrlRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forRequest" Type="MonoMac.Foundation.NSUrlRequest" />
      </Parameters>
      <Docs>
        <param name="forRequest">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSObject GetProperty (string key, MonoMac.Foundation.NSUrlRequest inRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSObject GetProperty(string key, class MonoMac.Foundation.NSUrlRequest inRequest) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("propertyForKey:inRequest:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="inRequest" Type="MonoMac.Foundation.NSUrlRequest" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="inRequest">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRequestCacheEquivalent">
      <MemberSignature Language="C#" Value="public static bool IsRequestCacheEquivalent (MonoMac.Foundation.NSUrlRequest first, MonoMac.Foundation.NSUrlRequest second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsRequestCacheEquivalent(class MonoMac.Foundation.NSUrlRequest first, class MonoMac.Foundation.NSUrlRequest second) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("requestIsCacheEquivalent:toRequest:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="MonoMac.Foundation.NSUrlRequest" />
        <Parameter Name="second" Type="MonoMac.Foundation.NSUrlRequest" />
      </Parameters>
      <Docs>
        <param name="first">To be added.</param>
        <param name="second">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoMac.Foundation.NSUrlProtocolChallengeEventArgs&gt; ReceivedAuthenticationChallenge;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoMac.Foundation.NSUrlProtocolChallengeEventArgs&gt; ReceivedAuthenticationChallenge" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoMac.Foundation.NSUrlProtocolChallengeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakClient property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedResponse">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoMac.Foundation.NSUrlProtocolResponseEventArgs&gt; ReceivedResponse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoMac.Foundation.NSUrlProtocolResponseEventArgs&gt; ReceivedResponse" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoMac.Foundation.NSUrlProtocolResponseEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakClient property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Redirected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoMac.Foundation.NSUrlProtocolRedirectEventArgs&gt; Redirected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoMac.Foundation.NSUrlProtocolRedirectEventArgs&gt; Redirected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoMac.Foundation.NSUrlProtocolRedirectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakClient property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClass">
      <MemberSignature Language="C#" Value="public static bool RegisterClass (MonoMac.ObjCRuntime.Class protocolClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RegisterClass(class MonoMac.ObjCRuntime.Class protocolClass) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("registerClass:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocolClass" Type="MonoMac.ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="protocolClass">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public static void RemoveProperty (string propertyKey, MonoMac.Foundation.NSMutableUrlRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveProperty(string propertyKey, class MonoMac.Foundation.NSMutableUrlRequest request) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("removePropertyForKey:inRequest:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyKey" Type="System.String" />
        <Parameter Name="request" Type="MonoMac.Foundation.NSMutableUrlRequest" />
      </Parameters>
      <Docs>
        <param name="propertyKey">To be added.</param>
        <param name="request">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSUrlRequest Request { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSUrlRequest Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("request")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSUrlRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public static void SetProperty (MonoMac.Foundation.NSObject value, string key, MonoMac.Foundation.NSMutableUrlRequest inRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProperty(class MonoMac.Foundation.NSObject value, string key, class MonoMac.Foundation.NSMutableUrlRequest inRequest) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setProperty:forKey:inRequest:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="inRequest" Type="MonoMac.Foundation.NSMutableUrlRequest" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="key">To be added.</param>
        <param name="inRequest">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartLoading">
      <MemberSignature Language="C#" Value="public virtual void StartLoading ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartLoading() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("startLoading")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopLoading">
      <MemberSignature Language="C#" Value="public virtual void StopLoading ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopLoading() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("stopLoading")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterClass">
      <MemberSignature Language="C#" Value="public static void UnregisterClass (MonoMac.ObjCRuntime.Class protocolClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterClass(class MonoMac.ObjCRuntime.Class protocolClass) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("unregisterClass:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocolClass" Type="MonoMac.ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="protocolClass">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakClient">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSObject WeakClient { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSObject WeakClient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("client")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setClient:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
