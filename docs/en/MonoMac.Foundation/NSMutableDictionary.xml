<Type Name="NSMutableDictionary" FullName="MonoMac.Foundation.NSMutableDictionary">
  <TypeSignature Language="C#" Value="public class NSMutableDictionary : MonoMac.Foundation.NSDictionary, System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;, System.Collections.Generic.IDictionary&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;, System.Collections.IDictionary" />
  <AssemblyInfo>
    <AssemblyName>monomac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSDictionary</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSMutableDictionary")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>
      <format type="text/html">
        <h2 class="jump">Overview</h2>
      </format>
      <para>The <c>NSMutableDictionary</c> class declares the programmatic interface to objects that manage mutable associations of keys and values. With its two efficient primitive methods—<c><format type="text/html"><a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/setObject:forKey:">setObject:forKey:</a></format></c> and <c><format type="text/html"><a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/removeObjectForKey:">removeObjectForKey:</a></format></c>—this class adds modification operations to the basic operations it inherits from <c>NSDictionary</c>.</para>
      <para>The other methods declared here operate by invoking one or both of these primitives. The non-primitive methods provide convenient ways of adding or removing multiple entries at a time.</para>
      <para>When an entry is removed from a mutable dictionary, the key and value objects that make up the entry receive <c><format type="text/html"><a target="_top" href="../../../Protocols/NSObject_Protocol/Reference/NSObject.html#//apple_ref/occ/intfm/NSObject/release">release</a></format></c> messages. If there are no further references to the objects, they’re deallocated. Note that if your program keeps a reference to such an object, the reference will become invalid unless you remember to send the object a <c><!--a target="_top"  -->retain<!--/a --></c> message before it’s removed from the dictionary. For example, the third statement below would result in a runtime error if <c>anObject</c> was not retained before it was removed:</para>
      <format type="text/html">
        <table>
          <tr>
            <td scope="row">
              <pre>id anObject = [[aDictionary objectForKey:theKey] retain];</pre>
            </td>
          </tr>
          <tr>
            <td scope="row">
              <pre />
            </td>
          </tr>
          <tr>
            <td scope="row">
              <pre>[aDictionary removeObjectForKey:theKey];</pre>
            </td>
          </tr>
          <tr>
            <td scope="row">
              <pre>[anObject someMessage];</pre>
            </td>
          </tr>
        </table>
      </format>
      <format type="text/html">
        <h2 class="jump">Tasks</h2>
      </format>
      <format type="text/html">
        <h3 class="tasks">Creating and Initializing a Mutable Dictionary</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/clm/NSMutableDictionary/dictionaryWithCapacity:">+ dictionaryWithCapacity:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Creates and returns a mutable dictionary, initially giving it enough allocated memory to hold a given number of entries." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/initWithCapacity:">- initWithCapacity:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Initializes a newly allocated mutable dictionary, allocating enough memory to hold &lt;em&gt;numItems&lt;/em&gt; entries." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
      <format type="text/html">
        <h3 class="tasks">Adding Entries to a Mutable Dictionary</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/setObject:forKey:">- setObject:forKey:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Adds a given key-value pair to the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/setValue:forKey:">- setValue:forKey:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Adds a given key-value pair to the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/addEntriesFromDictionary:">- addEntriesFromDictionary:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Adds to the receiver the entries from another dictionary." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/setDictionary:">- setDictionary:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Sets the contents of the receiver to entries in a given dictionary." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
      <format type="text/html">
        <h3 class="tasks">Removing Entries From a Mutable Dictionary</h3>
      </format>
      <list type="bullet">
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/removeObjectForKey:">- removeObjectForKey:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Removes a given key and its associated value from the receiver." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/removeAllObjects">- removeAllObjects</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Empties the receiver of its entries." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
        <item>
          <term>
            <c>
              <format type="text/html">
                <a href="Reference.html#//apple_ref/occ/instm/NSMutableDictionary/removeObjectsForKeys:">- removeObjectsForKeys:</a>
              </format>
            </c>
            <format type="text/html">
              <img data-abstract="Removes from the receiver entries specified by elements in a given array." src="../../../../../../Resources/Images/info_icon.jpg" class="tooltipicon" width="10" border="0" height="10" />
            </format>
          </term>
        </item>
      </list>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableDictionary ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <para>Implemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.</para>
        </summary>
        <remarks>
          <para>An <c>init</c> message is generally coupled with an <c><format type="text/html"><a href="Reference.html#//apple_ref/occ/clm/NSObject/alloc">alloc</a></format></c> or <c><format type="text/html"><a href="Reference.html#//apple_ref/occ/clm/NSObject/allocWithZone:">allocWithZone:</a></format></c> message in the same line of code:</para>
          <format type="text/html">
            <table>
              <tr>
                <td scope="row">
                  <pre>TheClass *newObject = [[TheClass alloc] init];</pre>
                </td>
              </tr>
            </table>
          </format>
          <para>An object isn’t ready to be used until it has been initialized. The <c>init</c> method defined in the <c>NSObject</c> class does no initialization; it simply returns <c>self</c>.</para>
          <para>Subclass implementations of this method should initialize and return the new object. If it can’t be initialized, they should release the object and return <c><!--a   -->nil<!--/a --></c>. In some cases, an <c>init</c> method might release the new object and return a substitute. Programs should therefore always use the object returned by <c>init</c>, and not necessarily the one returned by <c><format type="text/html"><a href="Reference.html#//apple_ref/occ/clm/NSObject/alloc">alloc</a></format></c> or <c><format type="text/html"><a href="Reference.html#//apple_ref/occ/clm/NSObject/allocWithZone:">allocWithZone:</a></format></c>, in subsequent code.</para>
          <para>Every class must guarantee that the <c>init</c> method either returns a fully functional instance of the class or raises an exception. Subclasses should override the <c>init</c> method to add class-specific initialization code. Subclass versions of <c>init</c> need to incorporate the initialization code for the classes they inherit from, through a message to <c>super</c>:</para>
          <format type="text/html">
            <table>
              <tr>
                <td scope="row">
                  <pre>- (id)init</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>{</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    if ((self = [super init])) {</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>        /* class-specific initialization goes here */</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    }</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    return self;</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>}</pre>
                </td>
              </tr>
            </table>
          </format>
          <para>Note that the message to <c>super</c> precedes the initialization code added in the method. This sequencing ensures that initialization proceeds in the order of inheritance.</para>
          <para>Subclasses often define <c>init...</c> methods with additional arguments to allow specific values to be set. The more arguments a method has, the more freedom it gives you to determine the character of initialized objects. Classes often have a set of <c>init...</c> methods, each with a different number of arguments. For example:</para>
          <format type="text/html">
            <table>
              <tr>
                <td scope="row">
                  <pre>- (id)init;</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>- (id)initWithTag:(int)tag;</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>- (id)initWithTag:(int)tag data:(struct info *)data;</pre>
                </td>
              </tr>
            </table>
          </format>
          <para>The convention is that at least one of these methods, usually the one with the most arguments, includes a message to <c>super</c> to incorporate the initialization of classes higher up the hierarchy. This method is called the <i>designated initializer</i> for the class. The other <c>init...</c> methods defined in the class directly or indirectly invoke the designated initializer through messages to <c>self</c>. In this way, all <c>init...</c> methods are chained together. For example:</para>
          <format type="text/html">
            <table>
              <tr>
                <td scope="row">
                  <pre>- (id)init</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>{</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    return [self initWithTag:-1];</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>}</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre />
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>- (id)initWithTag:(int)tag</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>{</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    return [self initWithTag:tag data:NULL];</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>}</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre />
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>- (id)initWithTag:(int)tag data:(struct info *)data</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>{</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    if ((self = [super init. . .])) {</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>        /* class-specific initialization goes here */</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    }</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    return self;</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>}</pre>
                </td>
              </tr>
            </table>
          </format>
          <para>In this example, the <c>initWithTag:data:</c> method is the designated initializer for the class.</para>
          <para>If a subclass does any initialization of its own, it must define its own designated initializer. This method should begin by sending a message to <c>super</c> to invoke the designated initializer of its superclass. Suppose, for example, that the three methods illustrated above are defined in the B class. The C class, a subclass of B, might have this designated initializer:</para>
          <format type="text/html">
            <table>
              <tr>
                <td scope="row">
                  <pre>- (id)initWithTag:(int)tag data:(struct info *)data object:anObject</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>{</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    if ((self = [super initWithTag:tag data:data])) {</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>        /* class-specific initialization goes here */</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    }</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    return self;</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>}</pre>
                </td>
              </tr>
            </table>
          </format>
          <para>If inherited <c>init...</c> methods are to successfully initialize instances of the subclass, they must all be made to (directly or indirectly) invoke the new designated initializer. To accomplish this, the subclass is obliged to cover (override) only the designated initializer of the superclass. For example, in addition to its designated initializer, the C class would also implement this method:</para>
          <format type="text/html">
            <table>
              <tr>
                <td scope="row">
                  <pre>- (id)initWithTag:(int)tag data:(struct info *)data</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>{</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>    return [self initWithTag:tag data:data object:nil];</pre>
                </td>
              </tr>
              <tr>
                <td scope="row">
                  <pre>}</pre>
                </td>
              </tr>
            </table>
          </format>
          <para>This code ensures that all three methods inherited from the B class also work for instances of the C class.</para>
          <para>Often the designated initializer of the subclass overrides the designated initializer of the superclass. If so, the subclass need only implement the one <c>init...</c> method.</para>
          <para>These conventions maintain a direct chain of <c>init...</c> links and ensure that the <c>new</c> method and all inherited <c>init...</c> methods return usable, initialized objects. They also prevent the possibility of an infinite loop wherein a subclass method sends a message (to <c>super</c>) to perform a superclass method, which in turn sends a message (to <c>self</c>) to perform the subclass method.</para>
          <para>This <c>init</c> method is the designated initializer for the <c>NSObject</c> class. Subclasses that do their own initialization should override it, as described above.</para>
          <format type="text/html">
            <h5 class="tight">Availability</h5>
          </format>
          <list type="bullet">
            <item>
              <term>Available in iPhone OS 2.0 and later.</term>
            </item>
          </list>
          <format type="text/html">
            <h5 class="tight">Related Sample Code</h5>
          </format>
          <list type="bullet">
            <item>
              <term>
                <format type="text/html">
                  <a target="_top" href="../../../../../../../samplecode/CryptoExercise/index.html#//apple_ref/doc/uid/DTS40008019">CryptoExercise</a>
                </format>
              </term>
            </item>
            <item>
              <term>
                <format type="text/html">
                  <a target="_top" href="../../../../../../../samplecode/GLES2Sample/index.html#//apple_ref/doc/uid/DTS40009188">GLES2Sample</a>
                </format>
              </term>
            </item>
            <item>
              <term>
                <format type="text/html">
                  <a target="_top" href="../../../../../../../samplecode/GLTextureAtlas/index.html#//apple_ref/doc/uid/DTS40009014">GLTextureAtlas</a>
                </format>
              </term>
            </item>
            <item>
              <term>
                <format type="text/html">
                  <a target="_top" href="../../../../../../../samplecode/TableViewSuite/index.html#//apple_ref/doc/uid/DTS40007318">TableViewSuite</a>
                </format>
              </term>
            </item>
            <item>
              <term>
                <format type="text/html">
                  <a target="_top" href="../../../../../../../samplecode/TheElements/index.html#//apple_ref/doc/uid/DTS40007419">TheElements</a>
                </format>
              </term>
            </item>
          </list>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableDictionary (MonoMac.Foundation.NSCoder coder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableDictionary (MonoMac.Foundation.NSDictionary other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithDictionary:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="other" Type="MonoMac.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>
          <para>Initializes a newly allocated dictionary by placing in it the keys and values contained in another given dictionary.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableDictionary (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableDictionary (MonoMac.Foundation.NSUrl url);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithContentsOfURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="url" Type="MonoMac.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <summary>
          <para>Initializes a newly allocated dictionary using the keys and values found at a given URL.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableDictionary (IntPtr handle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableDictionary (string fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithContentsOfFile:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">To be added.</param>
        <summary>
          <para>Initializes a newly allocated dictionary using the keys and values found in a file at a given path.</para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (MonoMac.Foundation.NSObject key, MonoMac.Foundation.NSObject value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="value" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (MonoMac.Foundation.NSObject key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDictionary">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSMutableDictionary FromDictionary (MonoMac.Foundation.NSDictionary source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("dictionaryWithDictionary:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="MonoMac.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>
          <para>Creates and returns a dictionary containing the keys and values from another given dictionary.</para>
        </summary>
        <returns>
          <para>A new dictionary containing the keys and values found in <i>otherDictionary</i>.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSMutableDictionary FromFile (string path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("dictionaryWithContentsOfFile:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>
          <para>Creates and returns a dictionary using the keys and values found in a file specified by a given path.</para>
        </summary>
        <returns>
          <para>A new dictionary that contains the dictionary at <i>path</i>, or <c>nil</c> if there is a file error or if the contents of the file are an invalid representation of a dictionary.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromObjectAndKey">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSMutableDictionary FromObjectAndKey (MonoMac.Foundation.NSObject obj, MonoMac.Foundation.NSObject key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("dictionaryWithObject:forKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="key" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <param name="key">To be added.</param>
        <summary>
          <para>Creates and returns a dictionary containing a given key and value.</para>
        </summary>
        <returns>
          <para>A new dictionary containing a single object, <i>anObject</i>, for a single key, <i>aKey</i>.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromObjectsAndKeys">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSMutableDictionary FromObjectsAndKeys (MonoMac.Foundation.NSObject[] objects, MonoMac.Foundation.NSObject[] keys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objects" Type="MonoMac.Foundation.NSObject[]" />
        <Parameter Name="keys" Type="MonoMac.Foundation.NSObject[]" />
      </Parameters>
      <Docs>
        <param name="objects">To be added.</param>
        <param name="keys">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSMutableDictionary FromUrl (MonoMac.Foundation.NSUrl url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("dictionaryWithContentsOfURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSMutableDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoMac.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <summary>
          <para>Creates and returns a dictionary using the keys and values found in a resource specified by a given URL.</para>
        </summary>
        <returns>
          <para>A new dictionary that contains the dictionary at <i>aURL</i>, or <c>nil</c> if there is an error or if the contents of the resource are an invalid representation of a dictionary.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt; GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override MonoMac.Foundation.NSObject this[MonoMac.Foundation.NSObject key] { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (MonoMac.Foundation.NSObject key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;NSObject,NSObject&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt; item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;NSObject,NSObject&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt; keyValuePair);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;NSObject,NSObject&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;[] array, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;.Count">
      <MemberSignature Language="C#" Value="int System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;.Count { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;.IsReadOnly { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;NSObject,NSObject&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt; keyValuePair);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;MonoMac.Foundation.NSObject&gt; System.Collections.Generic.IDictionary&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;.Keys { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;MonoMac.Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;MonoMac.Foundation.NSObject&gt; System.Collections.Generic.IDictionary&lt;MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject&gt;.Values { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;MonoMac.Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Add">
      <MemberSignature Language="C#" Value="void IDictionary.Add (object key, object value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Contains">
      <MemberSignature Language="C#" Value="bool IDictionary.Contains (object key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsFixedSize { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsReadOnly { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionary.Item[object key] { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Keys">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Remove">
      <MemberSignature Language="C#" Value="void IDictionary.Remove (object key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Values">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (MonoMac.Foundation.NSObject key, out MonoMac.Foundation.NSObject value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="value" Type="MonoMac.Foundation.NSObject&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
