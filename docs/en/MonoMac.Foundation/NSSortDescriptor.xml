<Type Name="NSSortDescriptor" FullName="MonoMac.Foundation.NSSortDescriptor">
  <TypeSignature Language="C#" Value="public class NSSortDescriptor : MonoMac.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>monomac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSSortDescriptor")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>
      <format type="text/html">
        <h2 class="jump zClassDescription_Name">Overview</h2>
      </format>
      <para>An instance of <c>NSSortDescriptor</c> describes a basis for ordering objects by specifying the property to use to compare the objects, the method to use to compare the properties, and whether the comparison should be ascending or descending. Instances of <c>NSSortDescriptor</c> are immutable.</para>
      <para>You construct an instance of <c>NSSortDescriptor</c> by specifying the key path of the property to be compared, the order of the sort (ascending or descending), and (optionally) a selector to use to perform the comparison. The three-argument constructor allows you to specify other comparison selectors such as <c>caseInsensitiveCompare:</c> and <c>localizedCompare:</c>. Sorting raises an exception if the objects to be sorted do not respond to the sort descriptor’s comparison selector.</para>
      <para>
        <i>Note:</i> Many of the descriptions of <c>NSSortDescriptor</c> methods refer to "property key". This, briefly, is a string (key) that identifies a property (an attribute or relationship) of an object. You can find a discussion of this terminology in "<!--a target="_top"  -->Object Modeling<!--/a -->" in <i><format type="text/html"><a target="_top" href="../../../../../Conceptual/CocoaFundamentals/Introduction/Introduction.html#//apple_ref/doc/uid/TP40002974">Cocoa Fundamentals Guide</a></format></i> and in <i><format type="text/html"><a target="_top" href="../../../../../Conceptual/KeyValueCoding/KeyValueCoding.html#//apple_ref/doc/uid/10000107i">Key-Value Coding Programming Guide</a></format></i>. </para>
      <para />
      <para>There are a number of situations in which you can use sort descriptors, for example:</para>
      <list type="bullet">
        <item>
          <term>
            <para>To sort an array (an instance of <c>NSArray</c> or <c>NSMutableArray</c>—see <c>sortedArrayUsingDescriptors:</c> and <c>sortUsingDescriptors:</c>)</para>
          </term>
        </item>
        <item>
          <term>
            <para>To directly compare two objects (see <see cref="M:MonoMac.Foundation.NSSortDescriptor.Compare(MonoMac.Foundation.NSObject,MonoMac.Foundation.NSObject)" />)</para>
          </term>
        </item>
        <item>
          <term>
            <para>To specify how the elements in a table view should be arranged (see <c>sortDescriptors</c>)</para>
          </term>
        </item>
        <item>
          <term>
            <para>To specify how the elements managed by an array controller should be arranged (see <c>sortDescriptors</c>)</para>
          </term>
        </item>
        <item>
          <term>
            <para>If you are using Core Data, to specify the ordering of objects returned from a fetch request (see <c>sortDescriptors</c>)</para>
          </term>
        </item>
      </list>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSSortDescriptor ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <para>Implemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSSortDescriptor (MonoMac.Foundation.NSCoder coder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSSortDescriptor (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSSortDescriptor (IntPtr handle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSSortDescriptor (string key, bool ascending);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithKey:ascending:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="ascending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="ascending">To be added.</param>
        <summary>
          <para>Returns an <c>NSSortDescriptor</c> object initialized with a given property key path and sort order, and with the default comparison selector.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSSortDescriptor (string key, bool ascending, MonoMac.ObjCRuntime.Selector selector);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithKey:ascending:selector:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="ascending" Type="System.Boolean" />
        <Parameter Name="selector" Type="MonoMac.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="ascending">To be added.</param>
        <param name="selector">To be added.</param>
        <summary>
          <para>Returns an <c>NSSortDescriptor</c> object initialized with a given property key path, sort order, and comparison selector.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ascending">
      <MemberSignature Language="C#" Value="public virtual bool Ascending { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("ascending")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSComparisonResult Compare (MonoMac.Foundation.NSObject object1, MonoMac.Foundation.NSObject object2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("compareObject:toObject:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="object1" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="object2" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="object1">To be added.</param>
        <param name="object2">To be added.</param>
        <summary>
          <para>Returns an <c>NSComparisonResult</c> value that indicates the ordering of two given objects.</para>
        </summary>
        <returns>
          <para>
            <c>
              <format type="text/html">
                <a target="_top" href="../../../Miscellaneous/Foundation_DataTypes/Reference/reference.html#//apple_ref/doc/c_ref/NSOrderedAscending">NSOrderedAscending</a>
              </format>
            </c> if <i>object1</i> is less than <i>object2</i>, <c><format type="text/html"><a target="_top" href="../../../Miscellaneous/Foundation_DataTypes/Reference/reference.html#//apple_ref/doc/c_ref/NSOrderedDescending">NSOrderedDescending</a></format></c> if <i>object1</i> is greater than <i>object2</i>, or <c><format type="text/html"><a target="_top" href="../../../Miscellaneous/Foundation_DataTypes/Reference/reference.html#//apple_ref/doc/c_ref/NSOrderedSame">NSOrderedSame</a></format></c> if <i>object1</i> is equal to <i>object2</i>.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public virtual string Key { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("key")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ReversedSortDescriptor">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSObject ReversedSortDescriptor { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("reversedSortDescriptor")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="Selector">
      <MemberSignature Language="C#" Value="public virtual MonoMac.ObjCRuntime.Selector Selector { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.ObjCRuntime.Selector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("selector")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
  </Members>
</Type>
