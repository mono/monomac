<Type Name="SecRecord" FullName="MonoMac.Security.SecRecord">
  <TypeSignature Language="C#" Value="public class SecRecord : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SecRecord extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Tracks a set of properties from the keychain.</summary>
    <remarks>
      <para>
This represents a set of properties on a keychain record.   It can be used to query the keychain by filling out a few of the properties and calling one of the Query methods on the <see cref="T:MonoMac.Security.SecKeyChain" /> class and it is also used as a result from some of the same Query methods.
</para>
      <para>
You would typically use it like this:
</para>
      <example>
        <code lang="C#">
var query = new SecRecord (SecKind.InternetPassword) {
   Sever = "bugzilla.novell.com",
   Account = "miguel"
};
var password = SecKeyChain.QueryAsData (query);
Console.WriteLine ("The password for the account is: {0}", password);

  </code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecRecord (MonoMac.Security.SecKind secKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoMac.Security.SecKind secKind) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="secKind" Type="MonoMac.Security.SecKind" />
      </Parameters>
      <Docs>
        <param name="secKind">Determines the class for this record.</param>
        <summary>Creates a keychain record.</summary>
        <remarks>
          <para>
When you create a SecRecord you need to specify the kind of record that you will be matching using one of the SecKind values, and you must set also:

<list type="bullet"><item><term>One or more attributes to match (AccessGroup, Accessible, Account, ApplicationLabel, ApplicationTag, AuthenticationType, CanDecrypt, CanDerive, CanEncrypt, CanSign, CanUnwrap, CanVerify, CanWrap, CertificateEncoding, CertificateType, Comment, CreationDate, Creator, CreatorType, Description, EffectiveKeySize, Generic, Invisible, IsNegative, IsPermanent, Issuer, KeyClass, KeySizeInBits, KeyType, Label, ModificationDate, Path, Port, Protocol, PublicKeyHash, SecurityDomain, SerialNumber, Server, Service, Subject, SubjectKeyID)</term></item><item><term>Optional search attributes, used to determine how the search is performed.   You do this by setting any of the Match properties in the class (MatchCaseInsensitive, MatchEmailAddressIfPresent, MatchIssuers, MatchItemList, MatchPolicy, MatchSubjectContains, MatchTrustedOnly, MatchValidOnDate)  </term></item></list></para>
          <para>
Once the class is constructed, you can pass this to the Query, Add, Remove or Update methods on the SecKeyChain class.
</para>
          <example>
            <code lang="C#">
var query = new SecRecord (SecKind.InternetPassword) {
   Sever = "bugzilla.novell.com",
   Account = "miguel"
};
var password = SecKeyChain.QueryAsData (query);
Console.WriteLine ("The password for the account is: {0}", password);

  </code>
          </example>
          <para>Internally this is setting the kSecClass key to one of the kSec* values as specifed by the SecKind.   On MacOS X the only supported value is InternetPassword, while iOS offers a wider range of options.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessGroup">
      <MemberSignature Language="C#" Value="public string AccessGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Access group name. </para>
        </summary>
        <value />
        <remarks>Access groups are used to share information between applications that share the same access group.    Applications that wish to do this, need to register the access group on their keychain-access-group entitlement.   This value must be set when the item is added to the keychain for the second application to be able to look it up.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accessible">
      <MemberSignature Language="C#" Value="public MonoMac.Security.SecAccessible Accessible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.Security.SecAccessible Accessible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Security.SecAccessible</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When should the keychain information be accessed.</summary>
        <value />
        <remarks>Applications should use the most restrictive possible value for this property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public string Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Accout name.</summary>
        <value />
        <remarks>Used by GenericPassword and InternetPassword kinds.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationLabel">
      <MemberSignature Language="C#" Value="public string ApplicationLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An application-level tag, used to identify this key.</summary>
        <value />
        <remarks>Intended for your program to use as an identifier that you can lookup.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationTag">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSData ApplicationTag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSData ApplicationTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To store your application data.</summary>
        <value />
        <remarks>You can use this to store application-level binary data in the form of an NSData source.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationType">
      <MemberSignature Language="C#" Value="public MonoMac.Security.SecAuthenticationType AuthenticationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.Security.SecAuthenticationType AuthenticationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Security.SecAuthenticationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The authentication type.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CanDecrypt">
      <MemberSignature Language="C#" Value="public bool CanDecrypt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDecrypt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this cryptographic key can be used to decrypt data.</summary>
        <value />
        <remarks>For keys, whether this can be used to decrypt data.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDerive">
      <MemberSignature Language="C#" Value="public bool CanDerive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDerive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this key can be used to derive another key.</summary>
        <value />
        <remarks>For keys, whether this can be used to derive another key.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanEncrypt">
      <MemberSignature Language="C#" Value="public bool CanEncrypt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEncrypt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this cryptographic key can be used to encrypt data.</summary>
        <value />
        <remarks>For keys, this determines whether the key can be used to encrypt data.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSign">
      <MemberSignature Language="C#" Value="public bool CanSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this key can be used to sign data.</summary>
        <value />
        <remarks>For keys, whether this can be used to sign.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanUnwrap">
      <MemberSignature Language="C#" Value="public bool CanUnwrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUnwrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this key can be used to unwrap another key.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CanVerify">
      <MemberSignature Language="C#" Value="public bool CanVerify { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanVerify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this key can be used to verify a digital signature.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CanWrap">
      <MemberSignature Language="C#" Value="public bool CanWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this key can be used to wrap another key.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CertificateEncoding">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSNumber CertificateEncoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSNumber CertificateEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The encoding used for the certificate.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CertificateType">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSNumber CertificateType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSNumber CertificateType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A certificate type.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public MonoMac.Security.SecRecord Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.Security.SecRecord Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Security.SecRecord</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes a copy of this SecRecord.</summary>
        <returns />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used editable comment for this record.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CreationDate">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSDate CreationDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSDate CreationDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Creation date for this item.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public int Creator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Creator key, a 32-bit value</summary>
        <value />
        <remarks>A 32 bit value used to flag the entry with the creator key.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatorType">
      <MemberSignature Language="C#" Value="public int CreatorType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CreatorType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Item's type.   32-bit value.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>User visible description of this item.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resourced used by the SecRecord object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the SecRecord class.</para>
          <para>Calling the Dispose method when you are finished using the SecRecord ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resourced used by the SecRecord object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the SecRecord class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposting <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the SecRecord ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectiveKeySize">
      <MemberSignature Language="C#" Value="public int EffectiveKeySize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EffectiveKeySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Number of effective bits on the key.</summary>
        <value />
        <remarks>The number of effective bits on the key.   Contrast this with the KeySize that might be larger, but contains padding.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SecRecord ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the SecRecord object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Generic">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSData Generic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSData Generic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Generic password's NSData storage.</summary>
        <value>Items of kind GenericPassword use this field to store item-specific data.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Invisible">
      <MemberSignature Language="C#" Value="public bool Invisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Invisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If set, the item is not displayed to the user.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public bool IsNegative { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNegative" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether there is a valid password associated</summary>
        <value />
        <remarks>You can set this flag if you want to force the user to enter the password every time he needs to use the item.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPermanent">
      <MemberSignature Language="C#" Value="public bool IsPermanent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPermanent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Issuer">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSData Issuer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSData Issuer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>X.500 Issuer certificate name as an NSData block</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="KeyClass">
      <MemberSignature Language="C#" Value="public MonoMac.Security.SecKeyClass KeyClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.Security.SecKeyClass KeyClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Security.SecKeyClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The key class.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="KeySizeInBits">
      <MemberSignature Language="C#" Value="public int KeySizeInBits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeySizeInBits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bitsize for the key, contrast this with EffectiveKeySize.</summary>
        <value />
        <remarks>This determines the number of bits in the key.   This can contain padding, contrast this with EffectiveKeySize.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyType">
      <MemberSignature Language="C#" Value="public MonoMac.Security.SecKeyType KeyType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.Security.SecKeyType KeyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Security.SecKeyType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The key type.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>User visible label for this item.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MatchCaseInsensitive">
      <MemberSignature Language="C#" Value="public bool MatchCaseInsensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MatchCaseInsensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether matches should be case insensitive</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MatchEmailAddressIfPresent">
      <MemberSignature Language="C#" Value="public string MatchEmailAddressIfPresent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MatchEmailAddressIfPresent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchIssuers">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSData[] MatchIssuers { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSData[] MatchIssuers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchItemList">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSArray MatchItemList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSArray MatchItemList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchPolicy">
      <MemberSignature Language="C#" Value="public MonoMac.Security.SecPolicy MatchPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Security.SecPolicy MatchPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Security.SecPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchSubjectContains">
      <MemberSignature Language="C#" Value="public string MatchSubjectContains { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MatchSubjectContains" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTrustedOnly">
      <MemberSignature Language="C#" Value="public bool MatchTrustedOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MatchTrustedOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchValidOnDate">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSDate MatchValidOnDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSDate MatchValidOnDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModificationDate">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSDate ModificationDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSDate ModificationDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Path component of an InternetPassword.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Port component of an InternetPassword</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Protocol">
      <MemberSignature Language="C#" Value="public MonoMac.Security.SecProtocol Protocol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.Security.SecProtocol Protocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Security.SecProtocol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Protocol component of an InternetPassword
</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PublicKeyHash">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSData PublicKeyHash { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSData PublicKeyHash" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Public key hash</summary>
        <value />
        <remarks>The public key hash, used by certificates.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityDomain">
      <MemberSignature Language="C#" Value="public string SecurityDomain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SecurityDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Security domain for InternetPassword items.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerialNumber">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSData SerialNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSData SerialNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Serial number for the certificate.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public string Server { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Server component for an InternetPassword</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Service">
      <MemberSignature Language="C#" Value="public string Service { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Service" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Service associated with an InternetPassword.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Subject">
      <MemberSignature Language="C#" Value="public string Subject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Subject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>X.500 Subject name stored as an NSData.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SubjectKeyID">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSData SubjectKeyID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSData SubjectKeyID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SubjectKeyID of the certificate.</summary>
        <value />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ValueData">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSData ValueData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSData ValueData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The value data to store.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
