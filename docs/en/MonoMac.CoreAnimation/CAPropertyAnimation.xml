<Type Name="CAPropertyAnimation" FullName="MonoMac.CoreAnimation.CAPropertyAnimation">
  <TypeSignature Language="C#" Value="public class CAPropertyAnimation : MonoMac.CoreAnimation.CAAnimation" />
  <AssemblyInfo>
    <AssemblyName>monomac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.CoreAnimation.CAAnimation</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("CAPropertyAnimation")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An animation that can animate object properties.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CAPropertyAnimation ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CAPropertyAnimation (MonoMac.Foundation.NSCoder coder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CAPropertyAnimation (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CAPropertyAnimation (IntPtr handle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Additive">
      <MemberSignature Language="C#" Value="public virtual bool Additive { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("isAdditive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setAdditive:")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cumulative">
      <MemberSignature Language="C#" Value="public virtual bool Cumulative { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("isCumulative")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setCumulative:")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="FromKeyPath">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreAnimation.CAPropertyAnimation FromKeyPath (string path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("animationWithKeyPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.CoreAnimation.CAPropertyAnimation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">A key path represening the property to animate.</param>
        <summary>Creates a property animation from the specified keypath.</summary>
        <returns>The new animation.</returns>
        <remarks>
          <para>The animation created will animate the property specified by the keypath.</para>
          <list type="table">
            <listheader>
              <term>Property</term>
              <description>Actio</description>
            </listheader>
            <item>
              <term>anchorPoint</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>backgroundColor</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.   Subproperties are animated with basic animations.</description>
            </item>
            <item>
              <term>backgroundFilters</term>
              <description>Animates using a CATransition for 0.25 seconds or the duration of the transaction.   The default animation type is CATransition.Fade and the range is from 0.0 to 1.0. The filter subproperties are animated with a CABasicAnimation.</description>
            </item>
            <item>
              <term>borderColor</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>borderWidth</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>bounds</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>compositingFilter</term>
              <description>Animates using a CATransition for 0.25 seconds or the duration of the transaction.   The default animation type is CATransition.Fade and the range is from 0.0 to 1.0. Subproperties are animated with basic animations.</description>
            </item>
            <item>
              <term>contents</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>contentsRect</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>cornerRadius</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>doubleSided</term>
              <description>No default implied animation is set.</description>
            </item>
            <item>
              <term>filters</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. Sub-properties of the filters are animated using the default implied CABasicAnimation described in Table 10.</description>
            </item>
            <item>
              <term>frame</term>
              <description>The frame property itself is not animatable. You can achieve the same results by modifying the bounds and position properties instead.</description>
            </item>
            <item>
              <term>hidden</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>mask</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. This property is available only on Mac OS X.</description>
            </item>
            <item>
              <term>masksToBounds</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>opacity</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>position</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>shadowColor</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. This property is available only on Mac OS X.</description>
            </item>
            <item>
              <term>shadowOffset</term>
Uses the  <description> default implied CABasicAnimation described in Table 10. This property is available only on Mac OS X.</description></item>
            <item>
              <term>shadowOpacity</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. This property is available only on Mac OS X.</description>
            </item>
            <item>
              <term>shadowRadius</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. This property is available only on Mac OS X.</description>
            </item>
            <item>
              <term>sublayers</term>
              <description>Animates using a CATransition for 0.25 seconds or the duration of the transaction.   The default animation type is CATransition.Fade and the range is from 0.0 to 1.0..</description>
            </item>
            <item>
              <term>sublayerTransform</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>transform</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>zPosition</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
          </list>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyPath">
      <MemberSignature Language="C#" Value="public virtual string KeyPath { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("keyPath", MonoMac.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setKeyPath:", MonoMac.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="ValueFunction">
      <MemberSignature Language="C#" Value="public virtual MonoMac.CoreAnimation.CAValueFunction ValueFunction { set; get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreAnimation.CAValueFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("valueFunction", MonoMac.ObjCRuntime.ArgumentSemantic.Retain)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setValueFunction:", MonoMac.ObjCRuntime.ArgumentSemantic.Retain)</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
  </Members>
</Type>
