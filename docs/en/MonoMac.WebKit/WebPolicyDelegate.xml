<Type Name="WebPolicyDelegate" FullName="MonoMac.WebKit.WebPolicyDelegate">
  <TypeSignature Language="C#" Value="public class WebPolicyDelegate : MonoMac.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebPolicyDelegate extends MonoMac.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("WebPolicyDelegate")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPolicyDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPolicyDelegate (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPolicyDelegate (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPolicyDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecidePolicyForMimeType">
      <MemberSignature Language="C#" Value="public virtual void DecidePolicyForMimeType (MonoMac.WebKit.WebView webView, string mimeType, MonoMac.Foundation.NSUrlRequest request, MonoMac.WebKit.WebFrame frame, MonoMac.Foundation.NSObject decisionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DecidePolicyForMimeType(class MonoMac.WebKit.WebView webView, string mimeType, class MonoMac.Foundation.NSUrlRequest request, class MonoMac.WebKit.WebFrame frame, class MonoMac.Foundation.NSObject decisionToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("webView:decidePolicyForMIMEType:request:frame:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="MonoMac.WebKit.WebView" />
        <Parameter Name="mimeType" Type="System.String" />
        <Parameter Name="request" Type="MonoMac.Foundation.NSUrlRequest" />
        <Parameter Name="frame" Type="MonoMac.WebKit.WebFrame" />
        <Parameter Name="decisionToken" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="mimeType">To be added.</param>
        <param name="request">To be added.</param>
        <param name="frame">To be added.</param>
        <param name="decisionToken">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To notify WebKit of the policy decision, invoke one of <see cref="M:MonoMac.WebKit.WebView.DecideDownload" />, <see cref="M:MonoMac.WebKit.WebView.DecideIgnore" /> or  <see cref="M:MonoMac.WebKit.WebVide.DecideUse" /> and pass the <paramref name="webPolicyDecisionListener" /> argument.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecidePolicyForNavigation">
      <MemberSignature Language="C#" Value="public virtual void DecidePolicyForNavigation (MonoMac.WebKit.WebView webView, MonoMac.Foundation.NSDictionary actionInformation, MonoMac.Foundation.NSUrlRequest request, MonoMac.WebKit.WebFrame frame, MonoMac.Foundation.NSObject decisionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DecidePolicyForNavigation(class MonoMac.WebKit.WebView webView, class MonoMac.Foundation.NSDictionary actionInformation, class MonoMac.Foundation.NSUrlRequest request, class MonoMac.WebKit.WebFrame frame, class MonoMac.Foundation.NSObject decisionToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("webView:decidePolicyForNavigationAction:request:frame:decisionListener:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="MonoMac.WebKit.WebView" />
        <Parameter Name="actionInformation" Type="MonoMac.Foundation.NSDictionary" />
        <Parameter Name="request" Type="MonoMac.Foundation.NSUrlRequest" />
        <Parameter Name="frame" Type="MonoMac.WebKit.WebFrame" />
        <Parameter Name="decisionToken" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="actionInformation">To be added.</param>
        <param name="request">To be added.</param>
        <param name="frame">To be added.</param>
        <param name="decisionToken">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To notify WebKit of the policy decision, invoke one of <see cref="M:MonoMac.WebKit.WebView.DecideDownload" />, <see cref="M:MonoMac.WebKit.WebView.DecideIgnore" /> or  <see cref="M:MonoMac.WebKit.WebView.DecideUse" /> and pass the <paramref name="webPolicyDecisionListener" /> argument.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecidePolicyForNewWindow">
      <MemberSignature Language="C#" Value="public virtual void DecidePolicyForNewWindow (MonoMac.WebKit.WebView webView, MonoMac.Foundation.NSDictionary actionInformation, MonoMac.Foundation.NSUrlRequest request, string newFrameName, MonoMac.Foundation.NSObject decisionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DecidePolicyForNewWindow(class MonoMac.WebKit.WebView webView, class MonoMac.Foundation.NSDictionary actionInformation, class MonoMac.Foundation.NSUrlRequest request, string newFrameName, class MonoMac.Foundation.NSObject decisionToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("webView:decidePolicyForNewWindowAction:request:newFrameName:decisionListener:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="MonoMac.WebKit.WebView" />
        <Parameter Name="actionInformation" Type="MonoMac.Foundation.NSDictionary" />
        <Parameter Name="request" Type="MonoMac.Foundation.NSUrlRequest" />
        <Parameter Name="newFrameName" Type="System.String" />
        <Parameter Name="decisionToken" Type="MonoMac.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="actionInformation">To be added.</param>
        <param name="request">To be added.</param>
        <param name="newFrameName">To be added.</param>
        <param name="decisionToken">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To notify WebKit of the policy decision, invoke one of <see cref="M:MonoMac.WebKit.WebView.DecideDownload" />, <see cref="M:MonoMac.WebKit.WebView.DecideIgnore" /> or  <see cref="M:MonoMac.WebKit.WebView.DecideUse" /> and pass the <paramref name="webPolicyDecisionListener" /> argument.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnableToImplementPolicy">
      <MemberSignature Language="C#" Value="public virtual void UnableToImplementPolicy (MonoMac.WebKit.WebView webView, MonoMac.Foundation.NSError error, MonoMac.WebKit.WebFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnableToImplementPolicy(class MonoMac.WebKit.WebView webView, class MonoMac.Foundation.NSError error, class MonoMac.WebKit.WebFrame frame) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("webView:unableToImplementPolicyWithError:frame::")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="MonoMac.WebKit.WebView" />
        <Parameter Name="error" Type="MonoMac.Foundation.NSError" />
        <Parameter Name="frame" Type="MonoMac.WebKit.WebFrame" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="error">To be added.</param>
        <param name="frame">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
