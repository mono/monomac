<Type Name="BlockLiteral" FullName="MonoMac.ObjCRuntime.BlockLiteral">
  <TypeSignature Language="C#" Value="public struct BlockLiteral" />
  <AssemblyInfo>
    <AssemblyName>monomac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Wraps a ECMA CLI delegate (C# lambdas, anonymous methods or delegates) as an Objective-C block.</summary>
    <remarks>
      <para>
This is a low-level class that is automatically used by the MonoMac bindings when using Objective-C block APIs.
</para>
      <para>
In the C#/ECMA CLI world delegates are automatically turned into blocks that can be consumed by Objective-C blocks-aware APIs.
</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="block_descriptor">
      <MemberSignature Language="C#" Value="public IntPtr block_descriptor;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Points to a BlockDescriptor structure.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
          <para>
MonoMac uses a single descriptor that maps Objective-C blocks to ECMA CLI delegates, allowing users to map Blocks to C# delegates, anonymous methods and lambdas.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanupBlock">
      <MemberSignature Language="C#" Value="public void CleanupBlock ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources associated with this block.</summary>
        <remarks>This releases the GCHandle that points to the user delegate.</remarks>
      </Docs>
    </Member>
    <Member MemberName="flags">
      <MemberSignature Language="C#" Value="public MonoMac.ObjCRuntime.BlockFlags flags;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.ObjCRuntime.BlockFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The flags for this Block.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="global_handle">
      <MemberSignature Language="C#" Value="public IntPtr global_handle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Block global handle.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="invoke">
      <MemberSignature Language="C#" Value="public IntPtr invoke;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The method to invoke.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
          <para>
When used with MonoMac's SetupBlock this contains a GCHandle that points to the trampoline delegate.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="isa">
      <MemberSignature Language="C#" Value="public IntPtr isa;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="local_handle">
      <MemberSignature Language="C#" Value="public IntPtr local_handle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
          <para>
When used with MonoMac's SetupBlock this contains a GCHandle that points to the user delegate.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="reserved">
      <MemberSignature Language="C#" Value="public int reserved;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reserved field.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
          <para>
Should be zero.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetupBlock">
      <MemberSignature Language="C#" Value="public void SetupBlock (Delegate trampoline, Delegate userDelegate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trampoline" Type="System.Delegate" />
        <Parameter Name="userDelegate" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="trampoline">The trampoline must be a static delegate.   Your code needs to keep a reference to it somewhere.</param>
        <param name="userDelegate">The user code to invoke.</param>
        <summary>Sets up a block using a trampoline and a user delegate.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
