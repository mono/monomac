<Type Name="NSTextBlock" FullName="MonoMac.AppKit.NSTextBlock">
  <TypeSignature Language="C#" Value="public class NSTextBlock : MonoMac.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSTextBlock extends MonoMac.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSTextBlock", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTextBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTextBlock (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTextBlock (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTextBlock (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public virtual MonoMac.AppKit.NSColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.AppKit.NSColor BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("backgroundColor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setBackgroundColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.AppKit.NSColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentWidth">
      <MemberSignature Language="C#" Value="public virtual float ContentWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ContentWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("contentWidth")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentWidthValueType">
      <MemberSignature Language="C#" Value="public virtual MonoMac.AppKit.NSTextBlockValueType ContentWidthValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.AppKit.NSTextBlockValueType ContentWidthValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("contentWidthValueType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.AppKit.NSTextBlockValueType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resourced used by the NSTextBlock object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSTextBlock class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposting <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the NSTextBlock ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBackground">
      <MemberSignature Language="C#" Value="public virtual void DrawBackground (System.Drawing.RectangleF frameRect, MonoMac.AppKit.NSView controlView, MonoMac.Foundation.NSRange charRange, MonoMac.AppKit.NSLayoutManager layoutManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBackground(valuetype System.Drawing.RectangleF frameRect, class MonoMac.AppKit.NSView controlView, valuetype MonoMac.Foundation.NSRange charRange, class MonoMac.AppKit.NSLayoutManager layoutManager) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("drawBackgroundWithFrame:inView:characterRange:layoutManager:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frameRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="controlView" Type="MonoMac.AppKit.NSView" />
        <Parameter Name="charRange" Type="MonoMac.Foundation.NSRange" />
        <Parameter Name="layoutManager" Type="MonoMac.AppKit.NSLayoutManager" />
      </Parameters>
      <Docs>
        <param name="frameRect">To be added.</param>
        <param name="controlView">To be added.</param>
        <param name="charRange">To be added.</param>
        <param name="layoutManager">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBorderColor">
      <MemberSignature Language="C#" Value="public virtual MonoMac.AppKit.NSColor GetBorderColor (MonoMac.AppKit.NSRectEdge edge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoMac.AppKit.NSColor GetBorderColor(valuetype MonoMac.AppKit.NSRectEdge edge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("borderColorForEdge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.AppKit.NSColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edge" Type="MonoMac.AppKit.NSRectEdge" />
      </Parameters>
      <Docs>
        <param name="edge">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoundsRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF GetBoundsRect (System.Drawing.RectangleF contentRect, System.Drawing.RectangleF rect, MonoMac.AppKit.NSTextContainer textContainer, MonoMac.Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetBoundsRect(valuetype System.Drawing.RectangleF contentRect, valuetype System.Drawing.RectangleF rect, class MonoMac.AppKit.NSTextContainer textContainer, valuetype MonoMac.Foundation.NSRange charRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("boundsRectForContentRect:inRect:textContainer:characterRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="textContainer" Type="MonoMac.AppKit.NSTextContainer" />
        <Parameter Name="charRange" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="contentRect">To be added.</param>
        <param name="rect">To be added.</param>
        <param name="textContainer">To be added.</param>
        <param name="charRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRectForLayout">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF GetRectForLayout (System.Drawing.PointF startingPoint, System.Drawing.RectangleF rect, MonoMac.AppKit.NSTextContainer textContainer, MonoMac.Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetRectForLayout(valuetype System.Drawing.PointF startingPoint, valuetype System.Drawing.RectangleF rect, class MonoMac.AppKit.NSTextContainer textContainer, valuetype MonoMac.Foundation.NSRange charRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("rectForLayoutAtPoint:inRect:textContainer:characterRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startingPoint" Type="System.Drawing.PointF" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="textContainer" Type="MonoMac.AppKit.NSTextContainer" />
        <Parameter Name="charRange" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="startingPoint">To be added.</param>
        <param name="rect">To be added.</param>
        <param name="textContainer">To be added.</param>
        <param name="charRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual float GetValue (MonoMac.AppKit.NSTextBlockDimension dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetValue(valuetype MonoMac.AppKit.NSTextBlockDimension dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("valueForDimension:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="MonoMac.AppKit.NSTextBlockDimension" />
      </Parameters>
      <Docs>
        <param name="dimension">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueType">
      <MemberSignature Language="C#" Value="public virtual MonoMac.AppKit.NSTextBlockValueType GetValueType (MonoMac.AppKit.NSTextBlockDimension dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoMac.AppKit.NSTextBlockValueType GetValueType(valuetype MonoMac.AppKit.NSTextBlockDimension dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("valueTypeForDimension:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.AppKit.NSTextBlockValueType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimension" Type="MonoMac.AppKit.NSTextBlockDimension" />
      </Parameters>
      <Docs>
        <param name="dimension">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWidth">
      <MemberSignature Language="C#" Value="public virtual float GetWidth (MonoMac.AppKit.NSTextBlockLayer layer, MonoMac.AppKit.NSRectEdge edge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetWidth(valuetype MonoMac.AppKit.NSTextBlockLayer layer, valuetype MonoMac.AppKit.NSRectEdge edge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("widthForLayer:edge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layer" Type="MonoMac.AppKit.NSTextBlockLayer" />
        <Parameter Name="edge" Type="MonoMac.AppKit.NSRectEdge" />
      </Parameters>
      <Docs>
        <param name="layer">To be added.</param>
        <param name="edge">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBorderColor">
      <MemberSignature Language="C#" Value="public virtual void SetBorderColor (MonoMac.AppKit.NSColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBorderColor(class MonoMac.AppKit.NSColor color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setBorderColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="MonoMac.AppKit.NSColor" />
      </Parameters>
      <Docs>
        <param name="color">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBorderColor">
      <MemberSignature Language="C#" Value="public virtual void SetBorderColor (MonoMac.AppKit.NSColor color, MonoMac.AppKit.NSRectEdge edge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBorderColor(class MonoMac.AppKit.NSColor color, valuetype MonoMac.AppKit.NSRectEdge edge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setBorderColor:forEdge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="MonoMac.AppKit.NSColor" />
        <Parameter Name="edge" Type="MonoMac.AppKit.NSRectEdge" />
      </Parameters>
      <Docs>
        <param name="color">To be added.</param>
        <param name="edge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContentWidth">
      <MemberSignature Language="C#" Value="public virtual void SetContentWidth (float val, MonoMac.AppKit.NSTextBlockValueType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentWidth(float32 val, valuetype MonoMac.AppKit.NSTextBlockValueType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setContentWidth:type:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Single" />
        <Parameter Name="type" Type="MonoMac.AppKit.NSTextBlockValueType" />
      </Parameters>
      <Docs>
        <param name="val">To be added.</param>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (float val, MonoMac.AppKit.NSTextBlockValueType type, MonoMac.AppKit.NSTextBlockDimension dimension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(float32 val, valuetype MonoMac.AppKit.NSTextBlockValueType type, valuetype MonoMac.AppKit.NSTextBlockDimension dimension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setValue:type:forDimension:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Single" />
        <Parameter Name="type" Type="MonoMac.AppKit.NSTextBlockValueType" />
        <Parameter Name="dimension" Type="MonoMac.AppKit.NSTextBlockDimension" />
      </Parameters>
      <Docs>
        <param name="val">To be added.</param>
        <param name="type">To be added.</param>
        <param name="dimension">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWidth">
      <MemberSignature Language="C#" Value="public virtual void SetWidth (float val, MonoMac.AppKit.NSTextBlockValueType type, MonoMac.AppKit.NSTextBlockLayer layer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWidth(float32 val, valuetype MonoMac.AppKit.NSTextBlockValueType type, valuetype MonoMac.AppKit.NSTextBlockLayer layer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setWidth:type:forLayer:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Single" />
        <Parameter Name="type" Type="MonoMac.AppKit.NSTextBlockValueType" />
        <Parameter Name="layer" Type="MonoMac.AppKit.NSTextBlockLayer" />
      </Parameters>
      <Docs>
        <param name="val">To be added.</param>
        <param name="type">To be added.</param>
        <param name="layer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWidth">
      <MemberSignature Language="C#" Value="public virtual void SetWidth (float val, MonoMac.AppKit.NSTextBlockValueType type, MonoMac.AppKit.NSTextBlockLayer layer, MonoMac.AppKit.NSRectEdge edge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWidth(float32 val, valuetype MonoMac.AppKit.NSTextBlockValueType type, valuetype MonoMac.AppKit.NSTextBlockLayer layer, valuetype MonoMac.AppKit.NSRectEdge edge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setWidth:type:forLayer:edge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val" Type="System.Single" />
        <Parameter Name="type" Type="MonoMac.AppKit.NSTextBlockValueType" />
        <Parameter Name="layer" Type="MonoMac.AppKit.NSTextBlockLayer" />
        <Parameter Name="edge" Type="MonoMac.AppKit.NSRectEdge" />
      </Parameters>
      <Docs>
        <param name="val">To be added.</param>
        <param name="type">To be added.</param>
        <param name="layer">To be added.</param>
        <param name="edge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public virtual MonoMac.AppKit.NSTextBlockVerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.AppKit.NSTextBlockVerticalAlignment VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("verticalAlignment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setVerticalAlignment:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.AppKit.NSTextBlockVerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthValueTypeForLayeredge">
      <MemberSignature Language="C#" Value="public virtual MonoMac.AppKit.NSTextBlockValueType WidthValueTypeForLayeredge (MonoMac.AppKit.NSTextBlockLayer layer, MonoMac.AppKit.NSRectEdge edge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoMac.AppKit.NSTextBlockValueType WidthValueTypeForLayeredge(valuetype MonoMac.AppKit.NSTextBlockLayer layer, valuetype MonoMac.AppKit.NSRectEdge edge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("widthValueTypeForLayer:edge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.AppKit.NSTextBlockValueType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layer" Type="MonoMac.AppKit.NSTextBlockLayer" />
        <Parameter Name="edge" Type="MonoMac.AppKit.NSRectEdge" />
      </Parameters>
      <Docs>
        <param name="layer">To be added.</param>
        <param name="edge">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
