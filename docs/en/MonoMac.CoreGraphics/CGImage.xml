<Type Name="CGImage" FullName="MonoMac.CoreGraphics.CGImage">
  <TypeSignature Language="C#" Value="public class CGImage : IDisposable, MonoMac.ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CGImage extends System.Object implements class MonoMac.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoMac.ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents bitmap images and bitmap masks.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGImage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGImage (int width, int height, int bitsPerComponent, int bitsPerPixel, int bytesPerRow, MonoMac.CoreGraphics.CGColorSpace colorSpace, MonoMac.CoreGraphics.CGBitmapFlags bitmapFlags, MonoMac.CoreGraphics.CGDataProvider provider, float[] decode, bool shouldInterpolate, MonoMac.CoreGraphics.CGColorRenderingIntent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height, int32 bitsPerComponent, int32 bitsPerPixel, int32 bytesPerRow, class MonoMac.CoreGraphics.CGColorSpace colorSpace, valuetype MonoMac.CoreGraphics.CGBitmapFlags bitmapFlags, class MonoMac.CoreGraphics.CGDataProvider provider, float32[] decode, bool shouldInterpolate, valuetype MonoMac.CoreGraphics.CGColorRenderingIntent intent) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="bitsPerComponent" Type="System.Int32" />
        <Parameter Name="bitsPerPixel" Type="System.Int32" />
        <Parameter Name="bytesPerRow" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="MonoMac.CoreGraphics.CGColorSpace" />
        <Parameter Name="bitmapFlags" Type="MonoMac.CoreGraphics.CGBitmapFlags" />
        <Parameter Name="provider" Type="MonoMac.CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.Single[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
        <Parameter Name="intent" Type="MonoMac.CoreGraphics.CGColorRenderingIntent" />
      </Parameters>
      <Docs>
        <param name="width">Requested image width.</param>
        <param name="height">Requested image height.</param>
        <param name="bitsPerComponent">Number of bits used per components.</param>
        <param name="bitsPerPixel">Number of bits per pixel.</param>
        <param name="bytesPerRow">Number of bytes per row.</param>
        <param name="colorSpace">The colorspace to use.</param>
        <param name="bitmapFlags">Configurationf flags.</param>
        <param name="provider">The data provider for this bitmap</param>
        <param name="decode">If this value is non-null, the array should contain pairs of (low,high) values for each channel that will be used to interpolate each component in the image.   The interpolation is a simple linear interpolation from the source range to the low,high range.   An RGB buffer would have 6 elements (two for each channel).</param>
        <param name="shouldInterpolate">Whether edges will be smoothed out</param>
        <param name="intent">Determines how to handle colors that are outside of the requested colorspace.</param>
        <summary>Creates an image.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGImage (int width, int height, int bitsPerComponent, int bitsPerPixel, int bytesPerRow, MonoMac.CoreGraphics.CGColorSpace colorSpace, MonoMac.CoreGraphics.CGImageAlphaInfo alphaInfo, MonoMac.CoreGraphics.CGDataProvider provider, float[] decode, bool shouldInterpolate, MonoMac.CoreGraphics.CGColorRenderingIntent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height, int32 bitsPerComponent, int32 bitsPerPixel, int32 bytesPerRow, class MonoMac.CoreGraphics.CGColorSpace colorSpace, valuetype MonoMac.CoreGraphics.CGImageAlphaInfo alphaInfo, class MonoMac.CoreGraphics.CGDataProvider provider, float32[] decode, bool shouldInterpolate, valuetype MonoMac.CoreGraphics.CGColorRenderingIntent intent) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="bitsPerComponent" Type="System.Int32" />
        <Parameter Name="bitsPerPixel" Type="System.Int32" />
        <Parameter Name="bytesPerRow" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="MonoMac.CoreGraphics.CGColorSpace" />
        <Parameter Name="alphaInfo" Type="MonoMac.CoreGraphics.CGImageAlphaInfo" />
        <Parameter Name="provider" Type="MonoMac.CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.Single[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
        <Parameter Name="intent" Type="MonoMac.CoreGraphics.CGColorRenderingIntent" />
      </Parameters>
      <Docs>
        <param name="width">Requested image width.</param>
        <param name="height">Requested image height.</param>
        <param name="bitsPerComponent">Number of bits used per components.</param>
        <param name="bitsPerPixel">Number of bits per pixel.</param>
        <param name="bytesPerRow">Number of bytes per row.</param>
        <param name="colorSpace">The colorspace to use.</param>
        <param name="alphaInfo">Configurationf flags, you can use this to configure the presence of an Alpha channel and the bitmap format.</param>
        <param name="provider">The data provider for this bitmap</param>
        <param name="decode">If this value is non-null, the array should contain pairs of (low,high) values for each channel that will be used to interpolate each component in the image.   The interpolation is a simple linear interpolation from the source range to the low,high range.   An RGB buffer would have 6 elements (two for each channel).</param>
        <param name="shouldInterpolate">Whether edges will be smoothed out</param>
        <param name="intent">Determines how to handle colors that are outside of the requested colorspace.</param>
        <summary>Creates an image using a specified AlphaInfo</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlphaInfo">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGImageAlphaInfo AlphaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.CoreGraphics.CGImageAlphaInfo AlphaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImageAlphaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The bitmap configuration.</summary>
        <value>
        </value>
        <remarks>The configuration of the image</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapInfo">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGBitmapFlags BitmapInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.CoreGraphics.CGBitmapFlags BitmapInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGBitmapFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The bitmap configuration.</summary>
        <value>
        </value>
        <remarks>The configuration of the image.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitsPerComponent">
      <MemberSignature Language="C#" Value="public int BitsPerComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BitsPerComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bits per component</summary>
        <value>
        </value>
        <remarks>The number of bits used per component in the image.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitsPerPixel">
      <MemberSignature Language="C#" Value="public int BitsPerPixel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BitsPerPixel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of bits per pixel.</summary>
        <value>
        </value>
        <remarks>The number of bits used per pixel.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPerRow">
      <MemberSignature Language="C#" Value="public int BytesPerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPerRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of bytes per row in the image.</summary>
        <value>
        </value>
        <remarks>The number of bytes used per row.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGImage Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.CoreGraphics.CGImage Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes a copy of the image.</summary>
        <returns>
        </returns>
        <remarks>Duplicates the image.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColorSpace">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGColorSpace ColorSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.CoreGraphics.CGColorSpace ColorSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGColorSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The image colorspace.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMask">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGImage CreateMask (int width, int height, int bitsPerComponent, int bitsPerPixel, int bytesPerRow, MonoMac.CoreGraphics.CGDataProvider provider, float[] decode, bool shouldInterpolate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.CoreGraphics.CGImage CreateMask(int32 width, int32 height, int32 bitsPerComponent, int32 bitsPerPixel, int32 bytesPerRow, class MonoMac.CoreGraphics.CGDataProvider provider, float32[] decode, bool shouldInterpolate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="bitsPerComponent" Type="System.Int32" />
        <Parameter Name="bitsPerPixel" Type="System.Int32" />
        <Parameter Name="bytesPerRow" Type="System.Int32" />
        <Parameter Name="provider" Type="MonoMac.CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.Single[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="bitsPerComponent">To be added.</param>
        <param name="bitsPerPixel">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="decode">To be added.</param>
        <param name="shouldInterpolate">To be added.</param>
        <summary>Creates an image mask.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
	    Image masks can be 1, 2, 4 or 8 bits per component.  1-bit
	    masks are the simplest ones as they either allow painting
	    (the mask is set to zero) or not (the mask bit is set to
	    one).  For 2, 4 and 8 the values the values are
	    interpolated between the possible range. 
	  </para>
          <para> Masks are used to filter how drawings are taking
	    place.  Zero values in a mask allow painting to take
	    place, a value of one would mask out the rendering.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataProvider">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGDataProvider DataProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.CoreGraphics.CGDataProvider DataProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGDataProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public float* Decode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32* Decode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single*</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resourced used by the CGImage object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the CGImage class.</para>
          <para>Calling the Dispose method when you are finished using the CGImage ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resourced used by the CGImage object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CGImage class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposting <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the CGImage ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CGImage ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the CGImage object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromJPEG">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGImage FromJPEG (MonoMac.CoreGraphics.CGDataProvider provider, float[] decode, bool shouldInterpolate, MonoMac.CoreGraphics.CGColorRenderingIntent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.CoreGraphics.CGImage FromJPEG(class MonoMac.CoreGraphics.CGDataProvider provider, float32[] decode, bool shouldInterpolate, valuetype MonoMac.CoreGraphics.CGColorRenderingIntent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="MonoMac.CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.Single[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
        <Parameter Name="intent" Type="MonoMac.CoreGraphics.CGColorRenderingIntent" />
      </Parameters>
      <Docs>
        <param name="provider">The data provider that contains a JPEG-encoded image.</param>
        <param name="decode">If this value is non-null, the array should contain pairs of (low,high) values for each channel that will be used to interpolate each component in the image.   The interpolation is a simple linear interpolation from the source range to the low,high range.   An RGB buffer would have 6 elements (two for each channel).</param>
        <param name="shouldInterpolate">Whether edges will be smoothed out</param>
        <param name="intent">Determines how to handle colors that are outside of the requested colorspace.</param>
        <summary>Creates a CGImage from a JPEG-encoded image.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPNG">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGImage FromPNG (MonoMac.CoreGraphics.CGDataProvider provider, float[] decode, bool shouldInterpolate, MonoMac.CoreGraphics.CGColorRenderingIntent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.CoreGraphics.CGImage FromPNG(class MonoMac.CoreGraphics.CGDataProvider provider, float32[] decode, bool shouldInterpolate, valuetype MonoMac.CoreGraphics.CGColorRenderingIntent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="MonoMac.CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.Single[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
        <Parameter Name="intent" Type="MonoMac.CoreGraphics.CGColorRenderingIntent" />
      </Parameters>
      <Docs>
        <param name="provider">The data provider that contains a PNG-encoded image.</param>
        <param name="decode">If this value is non-null, the array should contain pairs of (low,high) values for each channel that will be used to interpolate each component in the image.   The interpolation is a simple linear interpolation from the source range to the low,high range.   An RGB buffer would have 6 elements (two for each channel).</param>
        <param name="shouldInterpolate">Whether edges will be smoothed out</param>
        <param name="intent">Determines how to handle colors that are outside of the requested colorspace.</param>
        <summary>Creates a CGImage from a PNG-encoded image.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The image height in pixels.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMask">
      <MemberSignature Language="C#" Value="public bool IsMask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this image is a mask or a bitmap.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderingIntent">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGColorRenderingIntent RenderingIntent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoMac.CoreGraphics.CGColorRenderingIntent RenderingIntent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGColorRenderingIntent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The rendering intent.</summary>
        <value>
        </value>
        <remarks>The intent determines how to handle colors that are outside of the requested colorspace.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenImage">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGImage ScreenImage (int windownumber, System.Drawing.RectangleF bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.CoreGraphics.CGImage ScreenImage(int32 windownumber, valuetype System.Drawing.RectangleF bounds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="windownumber" Type="System.Int32" />
        <Parameter Name="bounds" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="windownumber">To be added.</param>
        <param name="bounds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInterpolate">
      <MemberSignature Language="C#" Value="public bool ShouldInterpolate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldInterpolate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether interpolation is enabled for this image.</summary>
        <value>
        </value>
        <remarks>If the value is true, then Quartz will perform edge smoothing on the image.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The image width in pixels.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithColorSpace">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGImage WithColorSpace (MonoMac.CoreGraphics.CGColorSpace cs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.CoreGraphics.CGImage WithColorSpace(class MonoMac.CoreGraphics.CGColorSpace cs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cs" Type="MonoMac.CoreGraphics.CGColorSpace" />
      </Parameters>
      <Docs>
        <param name="cs">To be added.</param>
        <summary>Creates a copy of the image based on the specified colorspace.</summary>
        <returns>
        </returns>
        <remarks>This method could return null if the image is a mask, or if there is a colorspace component mismatch between the images.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithImageInRect">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGImage WithImageInRect (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.CoreGraphics.CGImage WithImageInRect(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Region to copy.</param>
        <summary>Creates a new image with the dimensions specified in the rectangle</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMask">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGImage WithMask (MonoMac.CoreGraphics.CGImage mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.CoreGraphics.CGImage WithMask(class MonoMac.CoreGraphics.CGImage mask) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="MonoMac.CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="mask">The mask.</param>
        <summary>Creates a new image that has been masked with the specified mask.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMaskingColors">
      <MemberSignature Language="C#" Value="public MonoMac.CoreGraphics.CGImage WithMaskingColors (float[] components);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.CoreGraphics.CGImage WithMaskingColors(float32[] components) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="System.Single[]" />
      </Parameters>
      <Docs>
        <param name="components">Array contains pairs of (min,max) floats for each component.</param>
        <summary>Creats a new image by masking the values in the image with the specified components.</summary>
        <returns>
        </returns>
        <remarks>If the image has three components (RGB for example) the components array should contains six values.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
