<Type Name="CGAffineTransform" FullName="MonoMac.CoreGraphics.CGAffineTransform">
  <TypeSignature Language="C#" Value="public struct CGAffineTransform" />
  <AssemblyInfo>
    <AssemblyName>monomac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>2D Affine transformation used to convert between coordinate spaces.</summary>
    <remarks>
      <para>An affine transformation uses a matrix to transform poitns between coordinate spaces.   
</para>
      <para>
These transformation can be used to rotate, scale, shear and translate points and rectangles from one coordinate system into another.
</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGAffineTransform (float xx, float yx, float xy, float yy, float x0, float y0);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xx" Type="System.Single" />
        <Parameter Name="yx" Type="System.Single" />
        <Parameter Name="xy" Type="System.Single" />
        <Parameter Name="yy" Type="System.Single" />
        <Parameter Name="x0" Type="System.Single" />
        <Parameter Name="y0" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="xx">The xx component.</param>
        <param name="yx">The yx component.</param>
        <param name="xy">The xy component.</param>
        <param name="yy">The yy component.</param>
        <param name="x0">The X translation component.</param>
        <param name="y0">The y translation component.</param>
        <summary>Initializes an affine transformation from the matrix values.</summary>
        <remarks>
          <para>
Defines an affine transformation matrix with the following components:
</para>
          <para>
| xx yx  0 |
</para>
          <para>
| xy yy 0 |
</para>
          <para>
| tx ty 1 |
</para>
          <para>
The third column always has the values 0, 0, 1 so only six values need to be provided.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CGRectApplyAffineTransform">
      <MemberSignature Language="C#" Value="public static System.Drawing.RectangleF CGRectApplyAffineTransform (System.Drawing.RectangleF rect, MonoMac.CoreGraphics.CGAffineTransform t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="t" Type="MonoMac.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to transform</param>
        <param name="t">The affine transformation to apply to the points in the rectangle.</param>
        <summary>Applies an affine transformation to a rectangle. </summary>
        <returns>A rectangle whose coordinates have been transformed to the space determined by the affine.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to compare this instance against.</param>
        <summary>Compares the objects for equality.</summary>
        <returns>
          <see langword="true" /> if the objects are equal, <see langword="false" /> if not.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The hashcode for this object.</summary>
        <returns>An integer value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsIdentity">
      <MemberSignature Language="C#" Value="public bool IsIdentity { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if the affine corresponds to the identity affine.</summary>
        <value>Whether the affine is the identity.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MakeIdentity">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGAffineTransform MakeIdentity ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the identity affine transformation.</summary>
        <returns>The identity matrix.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MakeRotation">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGAffineTransform MakeRotation (float angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">The angle in radians.</param>
        <summary>Returns an affine transformation for the requested rotation angle.</summary>
        <returns>The affine transformation for the requested rotation.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MakeScale">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGAffineTransform MakeScale (float sx, float sy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Scale factor in the X coordinate.</param>
        <param name="sy">Scale factor for the Y coordinate.</param>
        <summary>Returns the affine transformation for the requested scaling in the X and Y coordinates.</summary>
        <returns>Returns the affine transformation for the requested scaling in the X and Y coordinates.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MakeTranslation">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGAffineTransform MakeTranslation (float tx, float ty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="System.Single" />
        <Parameter Name="ty" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="tx">X translation.</param>
        <param name="ty">Y translation.</param>
        <summary>Return the affine transformation for translating to the requested location.</summary>
        <returns>Return the affine transformation for translating to the requested location.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public void Multiply (MonoMac.CoreGraphics.CGAffineTransform b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MonoMac.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="b">The affine used to multiply the current affine by.</param>
        <summary>Multiplies the current affine transformation by the specified affine transformation.</summary>
        <remarks>Use affine multiplication to compose multiple affine tranformations into a single affine.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGAffineTransform Multiply (MonoMac.CoreGraphics.CGAffineTransform a, MonoMac.CoreGraphics.CGAffineTransform b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MonoMac.CoreGraphics.CGAffineTransform" />
        <Parameter Name="b" Type="MonoMac.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="a">The first affine.</param>
        <param name="b">The second affine.</param>
        <summary>Multiplies the two affine transformations and returns the result.</summary>
        <returns>The multiplied affine.</returns>
        <remarks>Use affine multiplication to compose multiple affine tranformations into a single affine.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (MonoMac.CoreGraphics.CGAffineTransform lhs, MonoMac.CoreGraphics.CGAffineTransform rhs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lhs" Type="MonoMac.CoreGraphics.CGAffineTransform" />
        <Parameter Name="rhs" Type="MonoMac.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="lhs">Left hand side affine.</param>
        <param name="rhs">Right hand side affine.</param>
        <summary>Operator overload, compares two affines.</summary>
        <returns>
          <see langword="true" /> if the affines are identical.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (MonoMac.CoreGraphics.CGAffineTransform lhs, MonoMac.CoreGraphics.CGAffineTransform rhs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lhs" Type="MonoMac.CoreGraphics.CGAffineTransform" />
        <Parameter Name="rhs" Type="MonoMac.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="lhs">Left hand side affine.</param>
        <param name="rhs">Right hand side affine.</param>
        <summary>Compares affines for inequality.</summary>
        <returns>
          <see langword="true" /> if the affines are different.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreGraphics.CGAffineTransform op_Multiply (MonoMac.CoreGraphics.CGAffineTransform a, MonoMac.CoreGraphics.CGAffineTransform b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MonoMac.CoreGraphics.CGAffineTransform" />
        <Parameter Name="b" Type="MonoMac.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (float angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Angle represented in radians.</param>
        <summary>Applies a rotation to the affine by the specified angle in radians.</summary>
        <remarks>Modifies the affine in place.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float sx, float sy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">The X scale factor.</param>
        <param name="sy">The Y scale factor.</param>
        <summary>Modify the affine to scale by the specified magnitudes.</summary>
        <remarks>This method modifies the current affine with the requested scaling factors.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Renders the affine in textual form.</summary>
        <returns />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TransformPoint">
      <MemberSignature Language="C#" Value="public System.Drawing.PointF TransformPoint (System.Drawing.PointF point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">The point to transform.</param>
        <summary>Transforms the coordinates of the provided point by the affine.</summary>
        <returns>The point translated to the new coordinate space.</returns>
        <remarks>
          <para>
The point defined by x, y is transformed like this:
</para>
          <para>
new_x = xx * x + xy * y + x0;
</para>
          <para>
new_y = yx * x + yy * y + y0;
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformRect">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF TransformRect (System.Drawing.RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle to transform.</param>
        <summary>Applies the affine transform to the supplied rectangle and returns the transformed rectangle.</summary>
        <returns>The transformed rectangle.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (float tx, float ty);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="System.Single" />
        <Parameter Name="ty" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="tx">X value to move the transform by.</param>
        <param name="ty">Y value to move the transform by.</param>
        <summary>Translates the affine transform by modifying every X value by the supplied X parameter and every Y value by the supplied Y parameter.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="x0">
      <MemberSignature Language="C#" Value="public float x0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>X translation component of the affine transform.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="xx">
      <MemberSignature Language="C#" Value="public float xx;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XX component of the affine.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="xy">
      <MemberSignature Language="C#" Value="public float xy;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XY component of the affine.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="y0">
      <MemberSignature Language="C#" Value="public float y0;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Y translation component of the affine transformation.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="yx">
      <MemberSignature Language="C#" Value="public float yx;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>YX component of the affine.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="yy">
      <MemberSignature Language="C#" Value="public float yy;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>YY component of the affine.</summary>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
